#include "mainwindow.h"
#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QGroupBox>
#include <QFormLayout>
#include <QFileDialog>
#include <QMessageBox>
#include <QJsonArray>
#include <QJsonObject>
#include <QJsonDocument>
#include <QFile>
#include <QHeaderView>
#include <QDateTime>
#include <cmath>
#include <QLabel>
#include <QFrame>
#include <QStatusBar>
#include <QScrollArea>
#include <QTabWidget>
#include <QComboBox>
#include <QDateTimeEdit>
#include <QDoubleSpinBox>
#include <QTableWidget>
#include <QPlainTextEdit>
#include <QListWidget>
#include <QPushButton>
#include <QChartView>
#include <QLineSeries>
#include <QSplineSeries>
#include <QScatterSeries>
#include <QValueAxis>
#include <QDateTimeAxis>
#include <QCategoryAxis>
#include <QBarSet>
#include <QBarSeries>
#include <QHorizontalBarSeries>
#include <QBarCategoryAxis>
#include <QCheckBox>
#include <QClipboard>
#include <QApplication>
#include <limits>

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
{
    resize(1400, 900);
    setWindowTitle("üå§Ô∏è –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö");

    tabWidget = new QTabWidget(this);
    setCentralWidget(tabWidget);

    dataTab = new QWidget;
    tabWidget->addTab(dataTab, "üìã –î–∞–Ω–Ω—ã–µ");

    chartsTab = new QWidget;
    tabWidget->addTab(chartsTab, "‚ò¢Ô∏è –†–∞–¥–∏–∞—Ü–∏—è");


    // –ë–æ—Ç-–≤–∫–ª–∞–¥–∫–∞ —É–¥–∞–ª–µ–Ω–∞ ‚Äî —Ñ–æ–∫—É—Å —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –≥—Ä–∞—Ñ–∏–∫–µ —Ä–∞–¥–∏–∞—Ü–∏–∏

    this->setStyleSheet(R"(
        QMainWindow {
            background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                stop: 0 #f8f9fa, stop: 1 #e9ecef);
        }
        QGroupBox {
            font-weight: bold;
            font-size: 12px;
            color: #2c3e50;
            border: 2px solid #bdc3c7;
            border-radius: 8px;
            margin-top: 10px;
            padding-top: 15px;
            background-color: #ffffff;
        }
        QGroupBox::title {
            subcontrol-origin: margin;
            subcontrol-position: top center;
            padding: 0 10px;
            background-color: #ecf0f1;
            border-radius: 4px;
        }
        QFrame {
            background-color: #ffffff;
            border-radius: 10px;
            border: 2px solid #dfe6e9;
        }
    )");

    QHBoxLayout *mainDataLayout = new QHBoxLayout(dataTab);
    mainDataLayout->setSpacing(20);
    mainDataLayout->setContentsMargins(20, 20, 20, 20);


    QFrame *leftPanel = new QFrame;
    leftPanel->setStyleSheet(R"(
        QFrame {
            background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                stop: 0 #ffffff, stop: 1 #f8f9fa);
            border-radius: 12px;
            border: 2px solid #e0e6ed;
        }
    )");

    QVBoxLayout *leftLayout = new QVBoxLayout(leftPanel);
    leftLayout->setSpacing(15);
    leftLayout->setContentsMargins(15, 15, 15, 15);


    QGroupBox *inputGroup = new QGroupBox("üìù –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–¥–∏–∞—Ü–∏–∏");

    QFormLayout *formLayout = new QFormLayout;
    formLayout->setSpacing(12);
    formLayout->setLabelAlignment(Qt::AlignRight);
    formLayout->setContentsMargins(10, 15, 10, 15);


    cityComboBox = new QComboBox;
    initializeCities();
    cityComboBox->setStyleSheet(R"(
        QComboBox {
            padding: 8px;
            border: 2px solid #bdc3c7;
            border-radius: 6px;
            background: white;
            font-size: 11px;
        }
        QComboBox:hover {
            border-color: #3498db;
        }
        QComboBox::drop-down {
            subcontrol-origin: padding;
            subcontrol-position: top right;
            width: 20px;
            border-left: 1px solid #bdc3c7;
        }
    )");
    formLayout->addRow("üèôÔ∏è –ì–æ—Ä–æ–¥:", cityComboBox);

    dateTimeEdit = new QDateTimeEdit(QDateTime::currentDateTime());
    dateTimeEdit->setCalendarPopup(true);
    dateTimeEdit->setDisplayFormat("yyyy-MM-dd HH:mm");
    dateTimeEdit->setStyleSheet(R"(
        QDateTimeEdit {
            padding: 8px;
            border: 2px solid #bdc3c7;
            border-radius: 6px;
            background: #ffffff;
            color: #2c3e50;
            font-size: 11px;
        }
        QDateTimeEdit:hover { border-color: #3498db; }
        QAbstractSpinBox { background: #ffffff; color: #2c3e50; }
        QCalendarWidget QWidget { background-color: #ffffff; color: #2c3e50; }
        QCalendarWidget QToolButton { color: #2c3e50; background: #ecf0f1; border: none; border-radius: 4px; padding: 4px; }
        QCalendarWidget QMenu { background: #ffffff; color: #2c3e50; }
        QCalendarWidget QSpinBox { background: #ffffff; color: #2c3e50; }
        QCalendarWidget QAbstractItemView:enabled { background: #ffffff; color: #2c3e50; selection-background-color: #3498db; selection-color: #ffffff; }
    )");
    formLayout->addRow("üïê –î–∞—Ç–∞/–≤—Ä–µ–º—è:", dateTimeEdit);

    radiationSpin = new QDoubleSpinBox;
    radiationSpin->setRange(0, 20000);
    radiationSpin->setDecimals(2);
    radiationSpin->setSuffix("–º–∫–†/—á");
    radiationSpin->setStyleSheet(R"(
        QDoubleSpinBox {
            padding: 8px;
            border: 2px solid #bdc3c7;
            border-radius: 6px;
            background: white;
            font-size: 11px;
        }
        QDoubleSpinBox:hover {
            border-color: #3498db;
        }
    )");
    formLayout->addRow("‚ò¢Ô∏è –†–∞–¥–∏–∞—Ü–∏—è:", radiationSpin);

    inputGroup->setLayout(formLayout);
    leftLayout->addWidget(inputGroup);


    btnAdd = new QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å");
    btnSave = new QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON");
    btnLoad = new QPushButton("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å JSON");


    QString buttonBaseStyle = R"(
        QPushButton {
            padding: 12px;
            font-weight: bold;
            border-radius: 8px;
            font-size: 11px;
            border: none;
            margin: 2px;
        }
        QPushButton:hover {
            opacity: 0.9;
            transform: translateY(-1px);
        }
        QPushButton:pressed {
            transform: translateY(1px);
        }
    )";

    btnAdd->setStyleSheet(buttonBaseStyle + R"(
        QPushButton {
            background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                stop: 0 #27ae60, stop: 1 #2ecc71);
            color: white;
        }
    )");

    btnSave->setStyleSheet(buttonBaseStyle + R"(
        QPushButton {
            background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                stop: 0 #f39c12, stop: 1 #f1c40f);
            color: white;
        }
    )");

    btnLoad->setStyleSheet(buttonBaseStyle + R"(
        QPushButton {
            background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                stop: 0 #8e44ad, stop: 1 #9b59b6);
            color: white;
        }
    )");

    connect(btnAdd, &QPushButton::clicked, this, &MainWindow::addRecord);
    connect(btnSave, &QPushButton::clicked, this, &MainWindow::saveToJson);
    connect(btnLoad, &QPushButton::clicked, this, &MainWindow::loadFromJson);

    leftLayout->addWidget(btnAdd);
    btnAnalyze = new QPushButton("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ");
    btnAnalyze->setStyleSheet(buttonBaseStyle + R"(
        QPushButton {
            background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                stop: 0 #2980b9, stop: 1 #3498db);
            color: white;
        }
    )");
    connect(btnAnalyze, &QPushButton::clicked, this, &MainWindow::analyzeData);

    leftLayout->addWidget(btnAnalyze);
    leftLayout->addWidget(btnSave);
    leftLayout->addWidget(btnLoad);
    leftLayout->addStretch();


    QVBoxLayout *rightLayout = new QVBoxLayout;
    rightLayout->setSpacing(15);


    QGroupBox *tableGroup = new QGroupBox("üìã –¢–∞–±–ª–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π —Ä–∞–¥–∏–∞—Ü–∏–∏");

    QVBoxLayout *tableLayout = new QVBoxLayout;

    table = new QTableWidget(0, 3);
    QStringList headers = {"üèôÔ∏è –ì–æ—Ä–æ–¥", "üïê –î–∞—Ç–∞/–≤—Ä–µ–º—è", "‚ò¢Ô∏è –†–∞–¥–∏–∞—Ü–∏—è"};
    table->setHorizontalHeaderLabels(headers);
    table->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);
    table->setAlternatingRowColors(true);
    table->setSelectionBehavior(QAbstractItemView::SelectRows);
    table->setEditTriggers(QAbstractItemView::NoEditTriggers);
    table->setStyleSheet(R"(
        QTableWidget {
            background-color: white;
            border: 2px solid #dfe6e9;
            border-radius: 8px;
            gridline-color: #dce1e5;
            font-size: 11px;
        }
        QTableWidget::item {
            padding: 6px;
            border-bottom: 1px solid #ecf0f1;
        }
        QTableWidget::item:selected {
            background-color: #3498db;
            color: white;
        }
        QHeaderView::section {
            background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                stop: 0 #34495e, stop: 1 #2c3e50);
            color: white;
            padding: 8px;
            border: 1px solid #2c3e50;
            font-weight: bold;
            font-size: 11px;
        }
        QTableWidget QScrollBar:vertical {
            border: none;
            background: #ecf0f1;
            width: 12px;
            margin: 0px;
        }
        QTableWidget QScrollBar::handle:vertical {
            background: #bdc3c7;
            border-radius: 6px;
            min-height: 20px;
        }
    )");

    tableLayout->addWidget(table);
    tableGroup->setLayout(tableLayout);
    rightLayout->addWidget(tableGroup, 7);


    // –ë–ª–æ–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    QGroupBox *analysisBox = new QGroupBox("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞");
    QVBoxLayout *analysisLayout = new QVBoxLayout;
    analysisText = new QPlainTextEdit;
    analysisText->setReadOnly(true);
    analysisText->setStyleSheet(R"(
        QPlainTextEdit {
            background-color: #0b132b;
            color: #e0e1dd;
            border: 2px solid #1c2541;
            border-radius: 8px;
            padding: 12px;
            font-family: 'Consolas', 'Monospace';
            font-size: 12px;
        }
        QPlainTextEdit:focus { border-color: #3a506b; }
    )");
    analysisText->setPlaceholderText("üìà –ù–∞–∂–º–∏—Ç–µ \"–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ\" –¥–ª—è —Ä–∞—Å—á—ë—Ç–æ–≤ –ø–æ —Ç–µ–∫—É—â–µ–º—É –≥–æ—Ä–æ–¥—É...");

    analysisLayout->addWidget(analysisText);
    analysisBox->setLayout(analysisLayout);
    rightLayout->addWidget(analysisBox, 3);


    mainDataLayout->addWidget(leftPanel, 3);
    mainDataLayout->addLayout(rightLayout, 7);


    QVBoxLayout *chartsLayout = new QVBoxLayout(chartsTab);
    chartsLayout->setSpacing(15);
    chartsLayout->setContentsMargins(20, 20, 20, 20);


    QHBoxLayout *chartsButtonLayout = new QHBoxLayout;
    btnUpdateCharts = new QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫");
    btnUpdateCharts->setStyleSheet(buttonBaseStyle + R"(
        QPushButton {
            background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                stop: 0 #e74c3c, stop: 1 #c0392b);
            color: white;
        }
    )");
    connect(btnUpdateCharts, &QPushButton::clicked, this, &MainWindow::updateCharts);

    btnThemeToggle = new QPushButton("‚ö´/‚ö™ –¢–µ–º–∞");
    btnThemeToggle->setStyleSheet(R"(
        QPushButton { padding: 8px 12px; border-radius: 6px; background: #2c3e50; color: #ffffff; font-weight: bold; }
        QPushButton:hover { background: #1f2d3a; }
    )");
    connect(btnThemeToggle, &QPushButton::clicked, this, &MainWindow::toggleTheme);
    chartsButtonLayout->addWidget(btnThemeToggle);
    chartsButtonLayout->addStretch();
    chartsButtonLayout->addWidget(btnUpdateCharts);
    chartsButtonLayout->addStretch();
    chartsLayout->addLayout(chartsButtonLayout);

    // –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–º –≥—Ä–∞—Ñ–∏–∫–∞ –∏ –ª–∏–Ω–∏—è–º–∏ MIN/MAX
    QHBoxLayout *chartAndControls = new QHBoxLayout;
    QWidget *controlsPanel = new QWidget;
    controlsPanel->setFixedWidth(260);
    controlsPanel->setStyleSheet(R"(
        QWidget { background: #ffffff; border: 2px solid #e0e6ed; border-radius: 8px; }
    )");
    QVBoxLayout *controlsLayout = new QVBoxLayout(controlsPanel);
    QLabel *chartTypeLbl = new QLabel("–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:");
    chartTypeCombo = new QComboBox;
    chartTypeCombo->addItems({"–¢–æ—á–∫–∏+–ª–∏–Ω–∏–∏", "–°–≥–ª–∞–∂–µ–Ω–Ω–∞—è"});
    chartTypeCombo->setCurrentIndex(0);
    controlsLayout->addWidget(chartTypeLbl);
    controlsLayout->addWidget(chartTypeCombo);

    showMinMaxCheck = new QCheckBox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏–Ω–∏–∏ MIN/MAX");
    controlsLayout->addWidget(showMinMaxCheck);
    btnFindMinMax = new QPushButton("–ù–∞–π—Ç–∏ MIN/MAX –∏ –¥–æ–±–∞–≤–∏—Ç—å –ª–∏–Ω–∏–∏");
    controlsLayout->addWidget(btnFindMinMax);
    connect(btnFindMinMax, &QPushButton::clicked, this, &MainWindow::findMinMax);

    controlsLayout->addStretch();

    chartAndControls->addWidget(controlsPanel);


    QScrollArea *scrollArea = new QScrollArea;
    scrollArea->setWidgetResizable(true);
    scrollArea->setStyleSheet(R"(
        QScrollArea {
            border: none;
            background: transparent;
        }
    )");

    QWidget *chartsContainer = new QWidget;
    QVBoxLayout *chartsContainerLayout = new QVBoxLayout(chartsContainer);
    chartsContainerLayout->setSpacing(20);

    QLabel *radLabel = new QLabel("‚ò¢Ô∏è –†–∞–¥–∏–∞—Ü–∏—è (–º–∫–†/—á)");
    radLabel->setStyleSheet("QLabel { font-weight: bold; font-size: 16px; color: #2c3e50; }");
    chartsContainerLayout->addWidget(radLabel);

    radiationChartView = new QChartView;
    QSize chartSize(900, 420);
    radiationChartView->setMinimumSize(chartSize);
    radiationChartView->setRenderHint(QPainter::Antialiasing);
    // –í—Å—Ç–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤–º–µ—Å—Ç–µ —Å –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    QHBoxLayout *chartRow = new QHBoxLayout;
    chartRow->addLayout(chartAndControls);
    chartRow->addWidget(radiationChartView, 1);
    chartsContainerLayout->addLayout(chartRow);

    // –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è —Å–µ—Ä–∏–π (—á–µ–∫–±–æ–∫—Å-–ª–∏—Å—Ç)
    QGroupBox *overlayGroup = new QGroupBox("üîÄ –ù–∞–ª–æ–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º");
    QVBoxLayout *overlayLayout = new QVBoxLayout;
    cityOverlayList = new QListWidget;
    cityOverlayList->setSelectionMode(QAbstractItemView::NoSelection);
    cityOverlayList->setStyleSheet(R"(
        QListWidget { border: 2px solid #dfe6e9; border-radius: 8px; }
        QListWidget::item { padding: 6px; }
        QListWidget::indicator { width: 16px; height: 16px; }
    )");
    overlayLayout->addWidget(new QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è:"));
    overlayLayout->addWidget(cityOverlayList);
    QHBoxLayout *overlayBtns = new QHBoxLayout;
    btnSelectAllCities = new QPushButton("–í—ã–±—Ä–∞—Ç—å –≤—Å–µ");
    btnClearAllCities = new QPushButton("–°–Ω—è—Ç—å –≤—Å–µ");
    overlayBtns->addWidget(btnSelectAllCities);
    overlayBtns->addWidget(btnClearAllCities);
    overlayBtns->addStretch();
    overlayGroup->setLayout(overlayLayout);
    overlayLayout->addLayout(overlayBtns);
    chartsContainerLayout->addWidget(overlayGroup);

    scrollArea->setWidget(chartsContainer);
    chartsLayout->addWidget(scrollArea);


    setupCharts();

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è (—á–µ–∫–±–æ–∫—Å—ã)
    for (int i = 0; i < cityComboBox->count(); ++i) {
        QListWidgetItem *item = new QListWidgetItem(cityComboBox->itemText(i));
        item->setFlags(item->flags() | Qt::ItemIsUserCheckable);
        item->setCheckState(Qt::Unchecked);
        cityOverlayList->addItem(item);
    }
    connect(btnSelectAllCities, &QPushButton::clicked, this, [this]() {
        for (int i = 0; i < cityOverlayList->count(); ++i) {
            cityOverlayList->item(i)->setCheckState(Qt::Checked);
        }
    });
    connect(btnClearAllCities, &QPushButton::clicked, this, [this]() {
        for (int i = 0; i < cityOverlayList->count(); ++i) {
            cityOverlayList->item(i)->setCheckState(Qt::Unchecked);
        }
    });


    statusBar()->setStyleSheet(R"(
        QStatusBar {
            background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                stop: 0 #2c3e50, stop: 1 #34495e);
            color: white;
            font-weight: bold;
            padding: 5px;
        }
    )");
    statusBar()->showMessage("‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –î–æ–±–∞–≤—å—Ç–µ –∑–∞–ø–∏—Å–∏ –∏ –ø–æ—Å—Ç—Ä–æ–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫.");
}


void MainWindow::initializeCities()
{
    cityComboBox->addItem("–ú–∏–Ω—Å–∫", "Minsk");
    cityComboBox->addItem("–ì–æ–º–µ–ª—å", "Gomel");
    cityComboBox->addItem("–ú–æ–≥–∏–ª—ë–≤", "Mogilev");
    cityComboBox->addItem("–í–∏—Ç–µ–±—Å–∫", "Vitebsk");
    cityComboBox->addItem("–ì—Ä–æ–¥–Ω–æ", "Grodno");
    cityComboBox->addItem("–ë—Ä–µ—Å—Ç", "Brest");
    cityComboBox->addItem("–ë–∞—Ä–∞–Ω–æ–≤–∏—á–∏", "Baranovichi");
    cityComboBox->addItem("–ë–æ—Ä–∏—Å–æ–≤", "Borisov");
    cityComboBox->addItem("–ü–∏–Ω—Å–∫", "Pinsk");
    cityComboBox->addItem("–û—Ä—à–∞", "Orsha");
    cityComboBox->addItem("–ú–æ–∑—ã—Ä—å", "Mozyr");
    cityComboBox->addItem("–°–æ–ª–∏–≥–æ—Ä—Å–∫", "Soligorsk");
    cityComboBox->addItem("–ù–æ–≤–æ–ø–æ–ª–æ—Ü–∫", "Novopolotsk");
    cityComboBox->addItem("–õ–∏–¥–∞", "Lida");
    cityComboBox->addItem("–ú–æ–ª–æ–¥–µ—á–Ω–æ", "Molodechno");
    cityComboBox->addItem("–ü–æ–ª–æ—Ü–∫", "Polotsk");
    cityComboBox->addItem("–ñ–ª–æ–±–∏–Ω", "Zhlobin");
    cityComboBox->addItem("–°–≤–µ—Ç–ª–æ–≥–æ—Ä—Å–∫", "Svetlogorsk");
    cityComboBox->addItem("–†–µ—á–∏—Ü–∞", "Rechitsa");
    cityComboBox->addItem("–ñ–æ–¥–∏–Ω–æ", "Zhodino");
}


MainWindow::~MainWindow() = default;

void MainWindow::addRecord()
{
    QString city = cityComboBox->currentText();
    if (city.isEmpty()) {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥.");
        return;
    }

    int row = table->rowCount();
    table->insertRow(row);

    table->setItem(row, 0, new QTableWidgetItem(city));
    table->setItem(row, 1, new QTableWidgetItem(dateTimeEdit->dateTime().toString("yyyy-MM-dd HH:mm")));
    table->setItem(row, 2, new QTableWidgetItem(QString::number(radiationSpin->value(), 'f', 2)));

    statusBar()->showMessage(QString("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –≥–æ—Ä–æ–¥–∞ %1").arg(city), 3000);
}



void MainWindow::analyzeData()
{
    int rows = table->rowCount();
    if (rows == 0) {
        QMessageBox::information(this, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∑–∞–ø–∏—Å–∏.");
        statusBar()->showMessage("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");
        return;
    }

    QString currentCity = cityComboBox->currentText();

    QVector<double> rads; rads.reserve(rows);
    int cityRecordCount = 0;

    for (int i = 0; i < rows; ++i) {
        QString recordCity = table->item(i, 0)->text();
        if (recordCity == currentCity) {
            rads.append(table->item(i, 2)->text().toDouble());
            cityRecordCount++;
        }
    }

    if (cityRecordCount == 0) {
        QMessageBox::information(this, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", QString("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ %1").arg(currentCity));
        statusBar()->showMessage(QString("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–æ—Ä–æ–¥–∞ %1").arg(currentCity));
        return;
    }

    auto mean = [](const QVector<double>& v)->double {
        if (v.isEmpty()) return 0.0;
        double s = 0;
        for (double x : v) s += x;
        return s / v.size();
    };
    auto max = [](const QVector<double>& v)->double {
        if (v.isEmpty()) return 0.0;
        double m = v[0];
        for (double x : v) if (x > m) m = x;
        return m;
    };
    auto min = [](const QVector<double>& v)->double {
        if (v.isEmpty()) return 0.0;
        double m = v[0];
        for (double x : v) if (x < m) m = x;
        return m;
    };
    auto stddev = [&](const QVector<double>& v)->double {
        if (v.isEmpty()) return 0.0;
        double m = mean(v);
        double s = 0;
        for (double x : v) s += (x - m) * (x - m);
        return std::sqrt(s / v.size());
    };

    QString result;
    result += QString("üìä –ê–ù–ê–õ–ò–ó –†–ê–î–ò–ê–¶–ò–ò –î–õ–Ø %1\n").arg(currentCity.toUpper());
    result += QString("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n");
    result += QString("üèôÔ∏è  –ì–æ—Ä–æ–¥: %1\n").arg(currentCity);
    result += QString("üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: %1\n\n").arg(cityRecordCount);

    result += QString("‚ò¢Ô∏è  –†–ê–î–ò–ê–¶–ò–Ø (–º–∫–†/—á):\n");
    result += QString("   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è: %1\n").arg(mean(rads), 0, 'f', 2);
    result += QString("   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: %1\n").arg(min(rads), 0, 'f', 2);
    result += QString("   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: %1\n").arg(max(rads), 0, 'f', 2);
    result += QString("   ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: %1\n").arg(stddev(rads), 0, 'f', 2);

    analysisText->setPlainText(result);
    statusBar()->showMessage(QString("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –≥–æ—Ä–æ–¥–∞ %1. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ %2 –∑–∞–ø–∏—Å–µ–π").arg(currentCity).arg(cityRecordCount), 5000);
}


void MainWindow::saveToJson()
{
    if (table->rowCount() == 0) {
        QMessageBox::warning(this, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞. –ù–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å.");
        statusBar()->showMessage("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è");
        return;
    }

    QString fileName = QFileDialog::getSaveFileName(this, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "", "JSON —Ñ–∞–π–ª—ã (*.json)");
    if (fileName.isEmpty()) return;

    QJsonArray records;
    for (int i = 0; i < table->rowCount(); i++) {
        QJsonObject obj;
        obj["city"] = table->item(i, 0)->text();
        obj["datetime"] = table->item(i, 1)->text();
        obj["radiation"] = table->item(i, 2)->text().toDouble();
        records.append(obj);
    }

    QJsonDocument doc(records);
    QFile file(fileName);
    if (!file.open(QIODevice::WriteOnly)) {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏.");
        statusBar()->showMessage("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞");
        return;
    }
    file.write(doc.toJson(QJsonDocument::Indented));
    file.close();

    QMessageBox::information(this, "–£—Å–ø–µ—Ö", QString("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª:\n%1").arg(fileName));
    statusBar()->showMessage(QString("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: %1").arg(fileName), 5000);
}


void MainWindow::loadFromJson()
{
    QString fileName = QFileDialog::getOpenFileName(this, "–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "", "JSON —Ñ–∞–π–ª—ã (*.json)");
    if (fileName.isEmpty()) return;

    QFile file(fileName);
    if (!file.open(QIODevice::ReadOnly)) {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª.");
        statusBar()->showMessage("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞");
        return;
    }

    QJsonDocument doc = QJsonDocument::fromJson(file.readAll());
    file.close();

    if (!doc.isArray()) {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π. –û–∂–∏–¥–∞–ª—Å—è –º–∞—Å—Å–∏–≤ JSON.");
        statusBar()->showMessage("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON");
        return;
    }

    QJsonArray records = doc.array();
    table->setRowCount(0);

    for (auto v : records) {
        QJsonObject obj = v.toObject();
        int row = table->rowCount();
        table->insertRow(row);

        table->setItem(row, 0, new QTableWidgetItem(obj.value("city").toString()));
        table->setItem(row, 1, new QTableWidgetItem(obj.value("datetime").toString()));
        table->setItem(row, 2, new QTableWidgetItem(QString::number(obj.value("radiation").toDouble(), 'f', 2)));
    }

    QMessageBox::information(this, "–£—Å–ø–µ—Ö", QString("–ó–∞–≥—Ä—É–∂–µ–Ω–æ %1 –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ñ–∞–π–ª–∞:\n%2").arg(records.size()).arg(fileName));
    statusBar()->showMessage(QString("–ó–∞–≥—Ä—É–∂–µ–Ω–æ %1 –∑–∞–ø–∏—Å–µ–π –∏–∑ %2").arg(records.size()).arg(fileName), 5000);
}


void MainWindow::setupCharts()
{
    createRadiationChart();
}

void MainWindow::createRadiationChart()
{
    QChart *chart = new QChart();
    chart->setTitle("‚ò¢Ô∏è –†–∞–¥–∏–∞—Ü–∏—è –ø–æ –≥–æ—Ä–æ–¥–∞–º");
    chart->setAnimationOptions(QChart::SeriesAnimations);
    chart->setTheme(QChart::ChartThemeLight);
    chart->legend()->setVisible(true);
    chart->legend()->setAlignment(Qt::AlignBottom);
    QFont legendFont; legendFont.setPointSize(10); legendFont.setBold(true);
    chart->legend()->setFont(legendFont);
    chart->setBackgroundBrush(QBrush(QColor(255,255,255)));
    chart->setPlotAreaBackgroundVisible(true);
    chart->setPlotAreaBackgroundBrush(QLinearGradient(0,0,0,1));

    // –ò–Ω–¥–µ–∫—Å–Ω–∞—è –æ—Å—å X –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –¥–∞—Ç–∞–º
    auto *axisX = new QValueAxis;
    axisX->setTitleText("–ò–Ω–¥–µ–∫—Å —Ç–æ—á–∫–∏");
    axisX->setLabelFormat("%.0f");
    axisX->setTickCount(8);
    QFont axisFont; axisFont.setPointSize(9);
    axisX->setLabelsFont(axisFont);

    auto *axisY = new QValueAxis;
    axisY->setTitleText("–º–∫–†/—á");
    axisY->setLabelFormat("%.0f");
    axisY->setTickCount(7);
    axisY->setMinorTickCount(1);
    axisY->setGridLineColor(QColor("#dfe6e9"));
    axisY->setGridLinePen(QPen(QColor("#dfe6e9"), 1, Qt::SolidLine));
    axisY->setMinorGridLineColor(QColor("#ecf0f1"));
    axisY->setMinorGridLinePen(QPen(QColor("#ecf0f1"), 1, Qt::DashLine));
    axisY->setLabelsFont(axisFont);

    chart->addAxis(axisX, Qt::AlignBottom);
    chart->addAxis(axisY, Qt::AlignLeft);

    radiationChartView->setChart(chart);
    radiationChartView->setRubberBand(QChartView::RectangleRubberBand);
}

void MainWindow::updateCharts()
{
    // –°–æ–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è
    QList<QString> selectedCities;
    for (int i = 0; i < cityOverlayList->count(); ++i) {
        QListWidgetItem *item = cityOverlayList->item(i);
        if (item->checkState() == Qt::Checked) selectedCities.append(item->text());
    }
    if (selectedCities.isEmpty()) {
        // –ï—Å–ª–∏ –≥–æ—Ä–æ–¥–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, —Å—Ç—Ä–æ–∏–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ
        selectedCities = { cityComboBox->currentText() };
    }

    QChart *chart = radiationChartView->chart();
    chart->removeAllSeries();

    QValueAxis *axisX = nullptr;
    QValueAxis *axisY = nullptr;
    {
        const auto axesX = chart->axes(Qt::Horizontal);
        for (QAbstractAxis *ax : axesX) {
            axisX = qobject_cast<QValueAxis*>(ax);
            if (axisX) break;
        }
        const auto axesY = chart->axes(Qt::Vertical);
        for (QAbstractAxis *ay : axesY) {
            axisY = qobject_cast<QValueAxis*>(ay);
            if (axisY) break;
        }
    }
    if (!axisX) {
        axisX = new QValueAxis;
        axisX->setTitleText("–ò–Ω–¥–µ–∫—Å —Ç–æ—á–∫–∏");
        axisX->setLabelFormat("%.0f");
        chart->addAxis(axisX, Qt::AlignBottom);
    }
    if (!axisY) {
        axisY = new QValueAxis;
        axisY->setTitleText("–º–∫–†/—á");
        axisY->setLabelFormat("%.0f");
        chart->addAxis(axisY, Qt::AlignLeft);
    }

    qint64 minTs = std::numeric_limits<qint64>::max();
    qint64 maxTs = std::numeric_limits<qint64>::min();
    double minY = std::numeric_limits<double>::max();
    double maxY = std::numeric_limits<double>::min();

    // –¶–≤–µ—Ç–∞ –¥–ª—è —Å–µ—Ä–∏–π
    QList<QColor> palette = { QColor("#e74c3c"), QColor("#3498db"), QColor("#2ecc71"), QColor("#9b59b6"), QColor("#f1c40f"), QColor("#e67e22"), QColor("#1abc9c") };

    int colorIndex = 0;
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞
    const QString type = chartTypeCombo ? chartTypeCombo->currentText() : QString("–¢–æ—á–∫–∏");
    QVector<QAbstractSeries*> createdSeries;

    for (const QString &city : selectedCities) {
        QColor color = palette[colorIndex % palette.size()];
        QPen pen(color); pen.setWidth(3); pen.setCosmetic(true);

        if (type == "–°–≥–ª–∞–∂–µ–Ω–Ω–∞—è") {
            QSplineSeries *spline = new QSplineSeries();
            spline->setName(city);
            spline->setColor(color);
            spline->setPen(pen);
            spline->setPointsVisible(true);

            int rowCount = table->rowCount();
            for (int i = 0, idx = 0; i < rowCount; ++i) {
                if (table->item(i, 0)->text() == city) {
                    double rad = table->item(i, 2)->text().toDouble();
                    spline->append(idx, rad);
                    qint64 t = idx;
                    minTs = std::min(minTs, t);
                    maxTs = std::max(maxTs, t);
                    minY = std::min(minY, rad);
                    maxY = std::max(maxY, rad);
                    idx++;
                }
            }

            chart->addSeries(spline);
            spline->attachAxis(axisX);
            spline->attachAxis(axisY);
            createdSeries.append(spline);
        } else { // –¢–æ—á–∫–∏+–ª–∏–Ω–∏–∏
            // –õ–∏–Ω–∏—è
            QLineSeries *line = new QLineSeries();
            line->setName(city);
            line->setColor(color);
            line->setPen(pen);
            // –¢–æ—á–∫–∏ –ø–æ–≤–µ—Ä—Ö
            QScatterSeries *scatter = new QScatterSeries();
            scatter->setName(city + " ‚Ä¢ —Ç–æ—á–∫–∏");
            scatter->setColor(color);
            scatter->setMarkerSize(7.5);

    int rowCount = table->rowCount();
            for (int i = 0, idx = 0; i < rowCount; ++i) {
                if (table->item(i, 0)->text() == city) {
                    double rad = table->item(i, 2)->text().toDouble();
                    line->append(idx, rad);
                    scatter->append(idx, rad);
                    qint64 t = idx;
                    minTs = std::min(minTs, t);
                    maxTs = std::max(maxTs, t);
                    minY = std::min(minY, rad);
                    maxY = std::max(maxY, rad);
                    idx++;
                }
            }

            chart->addSeries(line);
            line->attachAxis(axisX);
            line->attachAxis(axisY);
            chart->addSeries(scatter);
            scatter->attachAxis(axisX);
            scatter->attachAxis(axisY);
            createdSeries.append(line);
            createdSeries.append(scatter);
        }

        colorIndex++;
    }

    if (minTs == std::numeric_limits<qint64>::max()) {
        QMessageBox::information(this, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤");
        return;
    }

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ª–∏–Ω–∏–∏ MIN/MAX –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    for (QAbstractSeries *s : chart->series()) {
        if (s->name() == "MIN –ª–∏–Ω–∏—è" || s->name() == "MAX –ª–∏–Ω–∏—è") {
            chart->removeSeries(s);
            s->deleteLater();
        }
    }
    if (btnFindMinMax) btnFindMinMax->setEnabled(true);

    // –ù–µ–±–æ–ª—å—à–∏–µ –æ—Ç—Å—Ç—É–ø—ã –ø–æ Y
    double padding = (maxY - minY) * 0.1;
    if (padding <= 0) padding = 1.0;
    axisY->setRange(std::max(0.0, minY - padding), maxY + padding);
    axisX->setRange(minTs, maxTs);

    statusBar()->showMessage("‚úÖ –ì—Ä–∞—Ñ–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω", 3000);
}

// applyTheme removed; using toggleTheme for light/dark switch

void MainWindow::toggleTheme()
{
    if (!radiationChartView || !radiationChartView->chart()) return;
    QChart::ChartTheme current = radiationChartView->chart()->theme();
    QChart::ChartTheme next = (current == QChart::ChartThemeDark) ? QChart::ChartThemeLight : QChart::ChartThemeDark;
    radiationChartView->chart()->setTheme(next);
}

void MainWindow::findMinMax()
{
    if (!radiationChartView || !radiationChartView->chart()) return;
    QChart *chart = radiationChartView->chart();
    if (btnFindMinMax && !btnFindMinMax->isEnabled()) return; // —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ
    if (!showMinMaxCheck || !showMinMaxCheck->isChecked()) {
        QMessageBox::information(this, "MIN/MAX", "–í–∫–ª—é—á–∏—Ç–µ –æ–ø—Ü–∏—é '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏–Ω–∏–∏ MIN/MAX'.");
        return;
    }

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ Y –∏–∑ —Ç–µ–∫—É—â–∏—Ö —Å–µ—Ä–∏–π –ª–∏–Ω–∏–π/–±–∞—Ä–æ–≤
    double minY = std::numeric_limits<double>::max();
    double maxY = std::numeric_limits<double>::lowest();
    for (QAbstractSeries *s : chart->series()) {
        if (auto ls = qobject_cast<QLineSeries*>(s)) {
            for (const QPointF &p : ls->points()) {
                minY = std::min(minY, p.y());
                maxY = std::max(maxY, p.y());
            }
        } else if (auto bs = qobject_cast<QBarSeries*>(s)) {
            for (QBarSet *set : bs->barSets()) {
                for (int i = 0; i < set->count(); ++i) {
                    minY = std::min(minY, set->at(i));
                    maxY = std::max(maxY, set->at(i));
                }
            }
        }
    }

    if (minY == std::numeric_limits<double>::max()) {
        QMessageBox::information(this, "MIN/MAX", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ.");
        return;
    }

    // –†–∏—Å—É–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ MIN –∏ MAX –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–µ—Ä–∏–∏
    auto drawHLine = [&](double y, const QColor &color, const QString &name) {
        QLineSeries *line = new QLineSeries();
        line->setName(name);
        QPen pen(color); pen.setWidth(2); pen.setStyle(Qt::DashLine); pen.setCosmetic(true);
        line->setPen(pen);
        // –î–∏–∞–ø–∞–∑–æ–Ω X
        QValueAxis *axisX = nullptr;
        for (QAbstractAxis *ax : chart->axes(Qt::Horizontal)) {
            if ((axisX = qobject_cast<QValueAxis*>(ax))) break;
        }
        double xMin = 0.0, xMax = 0.0;
        if (axisX) { xMin = axisX->min(); xMax = axisX->max(); }
        line->append(xMin, y);
        line->append(xMax, y);
        chart->addSeries(line);
        line->attachAxis(axisX);
        if (auto axisY = qobject_cast<QValueAxis*>(chart->axes(Qt::Vertical).value(0))) {
            line->attachAxis(axisY);
        }
    };

    drawHLine(minY, QColor("#27ae60"), "MIN –ª–∏–Ω–∏—è");
    drawHLine(maxY, QColor("#c0392b"), "MAX –ª–∏–Ω–∏—è");
    if (btnFindMinMax) btnFindMinMax->setEnabled(false);
}


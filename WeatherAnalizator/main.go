package main

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var bot *tgbotapi.BotAPI

type UserState struct {
	Step string
	City string
	Date string
	Data WeatherData
}

type WeatherData struct {
	City        string
	Date        string
	Temperature float64
	Sun         float64
	UV          float64
	Humidity    float64
	Wind        float64
}

var userStates = make(map[int64]*UserState)

var userData = make(map[int64][]WeatherData)

func main() {
	token := os.Getenv("WEATHER_TOKEN")
	if token == "" {
		log.Fatal("TELEGRAM_BOT_TOKEN is required")
	}

	var err error
	bot, err = tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatal(err)
	}

	log.Printf("Authorized on %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 30
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			handleMessage(update.Message)
		} else if update.CallbackQuery != nil {
			handleCallback(update.CallbackQuery)
		}
	}
}

func sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	bot.Send(msg)
}

func sendMessageWithMenu(chatID int64, text string) {
	kb := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
		),
	)
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = kb
	bot.Send(msg)
}

func sendStartMenu(chatID int64) {
	text := "*üå§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ü–æ–≥–æ–¥–Ω—ã—Ö –î–∞–Ω–Ω—ã—Ö!*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
	kb := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üì• –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –≥–æ—Ä–æ–¥—É", "choose_city"),
			tgbotapi.NewInlineKeyboardButtonData("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", "view_stats"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚Ñπ –û –ø—Ä–æ–≥—Ä–∞–º–º–µ", "about"),
		),
	)
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = kb
	bot.Send(msg)
}

func sendCityMenu(chatID int64) {
	cities := []struct{ Name, Code string }{
		{"–ú–∏–Ω—Å–∫", "Minsk"}, {"–ì–æ–º–µ–ª—å", "Gomel"}, {"–ú–æ–≥–∏–ª—ë–≤", "Mogilev"},
		{"–í–∏—Ç–µ–±—Å–∫", "Vitebsk"}, {"–ì—Ä–æ–¥–Ω–æ", "Grodno"}, {"–ë—Ä–µ—Å—Ç", "Brest"},
		{"–ë–∞—Ä–∞–Ω–æ–≤–∏—á–∏", "Baranovichi"}, {"–ë–æ—Ä–∏—Å–æ–≤", "Borisov"}, {"–ü–∏–Ω—Å–∫", "Pinsk"},
		{"–û—Ä—à–∞", "Orsha"}, {"–ú–æ–∑—ã—Ä—å", "Mozyr"}, {"–°–æ–ª–∏–≥–æ—Ä—Å–∫", "Soligorsk"},
		{"–ù–æ–≤–æ–ø–æ–ª–æ—Ü–∫", "Novopolotsk"}, {"–õ–∏–¥–∞", "Lida"}, {"–ú–æ–ª–æ–¥–µ—á–Ω–æ", "Molodechno"},
		{"–ü–æ–ª–æ—Ü–∫", "Polotsk"}, {"–ñ–ª–æ–±–∏–Ω", "Zhlobin"}, {"–°–≤–µ—Ç–ª–æ–≥–æ—Ä—Å–∫", "Svetlogorsk"},
		{"–†–µ—á–∏—Ü–∞", "Rechitsa"}, {"–ñ–æ–¥–∏–Ω–æ", "Zhodino"},
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, city := range cities {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(city.Name, "city_"+city.Code),
		))
	}
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "main_menu"),
	))

	kb := tgbotapi.NewInlineKeyboardMarkup(rows...)
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:")
	msg.ReplyMarkup = kb
	bot.Send(msg)
}

func sendDateMenu(chatID int64, city string) {
	dates := []string{
		time.Now().Format("2006-01-02"),
		time.Now().AddDate(0, 0, 1).Format("2006-01-02"),
		time.Now().AddDate(0, 0, 2).Format("2006-01-02"),
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, d := range dates {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(d, "date_"+city+"_"+d),
		))
	}
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "choose_city"),
	))

	kb := tgbotapi.NewInlineKeyboardMarkup(rows...)
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ "+city+":")
	msg.ReplyMarkup = kb
	bot.Send(msg)
}

func handleWeatherInput(msg *tgbotapi.Message, state *UserState) {
	text := msg.Text
	switch state.Step {
	case "input_temperature":
		val, err := strconv.ParseFloat(text, 64)
		if err != nil {
			sendMessage(msg.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
			return
		}
		state.Data.Temperature = val
		state.Step = "input_sun"
		sendMessage(msg.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–ª–Ω–µ—á–Ω—É—é —Ä–∞–¥–∏–∞—Ü–∏—é (–í—Ç/–º¬≤):")
	case "input_sun":
		val, err := strconv.ParseFloat(text, 64)
		if err != nil {
			sendMessage(msg.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
			return
		}
		state.Data.Sun = val
		state.Step = "input_uv"
		sendMessage(msg.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ UV –∏–Ω–¥–µ–∫—Å:")
	case "input_uv":
		val, err := strconv.ParseFloat(text, 64)
		if err != nil {
			sendMessage(msg.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
			return
		}
		state.Data.UV = val
		state.Step = "input_humidity"
		sendMessage(msg.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –≤–ª–∞–∂–Ω–æ—Å—Ç—å (%):")
	case "input_humidity":
		val, err := strconv.ParseFloat(text, 64)
		if err != nil {
			sendMessage(msg.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
			return
		}
		state.Data.Humidity = val
		state.Step = "input_wind"
		sendMessage(msg.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ (–º/—Å):")
	case "input_wind":
		val, err := strconv.ParseFloat(text, 64)
		if err != nil {
			sendMessage(msg.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
			return
		}
		state.Data.Wind = val
		state.Step = ""
		state.Data.City = state.City
		state.Data.Date = state.Date

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
		userData[msg.Chat.ID] = append(userData[msg.Chat.ID], state.Data)

		sendMessage(msg.Chat.ID, "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
		sendStartMenu(msg.Chat.ID)
		delete(userStates, msg.Chat.ID)
	}
}

func handleMessage(msg *tgbotapi.Message) {
	state, exists := userStates[msg.Chat.ID]
	if exists && state.Step != "" {
		handleWeatherInput(msg, state)
		return
	}

	if msg.Text == "/start" {
		sendStartMenu(msg.Chat.ID)
	} else {
		sendStartMenu(msg.Chat.ID)
	}
}

func handleCallback(cb *tgbotapi.CallbackQuery) {
	bot.Request(tgbotapi.NewCallback(cb.ID, ""))
	chatID := cb.Message.Chat.ID
	data := cb.Data

	switch {
	case data == "main_menu":
		sendStartMenu(chatID)
	case data == "choose_city":
		sendCityMenu(chatID)
	case data[:5] == "city_":
		city := data[5:]
		userStates[chatID] = &UserState{Step: "", City: city}
		sendDateMenu(chatID, city)
	case data[:5] == "date_":
		info := data[5:]
		var city, date string
		fmt.Sscanf(info, "%[^_]_%s", &city, &date)
		state := &UserState{
			Step: "input_temperature",
			City: city,
			Date: date,
		}
		userStates[chatID] = state
		sendMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É (¬∞C):")
	case data == "view_stats":
		showStatistics(chatID)
	case data == "about":
		sendMessageWithMenu(chatID, "*‚Ñπ –û –ø—Ä–æ–≥—Ä–∞–º–º–µ*\n\n–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ü–æ–≥–æ–¥–Ω—ã—Ö –î–∞–Ω–Ω—ã—Ö –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ–≥–æ–¥—ã.")
	}
}

func showStatistics(chatID int64) {
	data, ok := userData[chatID]
	if !ok || len(data) == 0 {
		sendMessage(chatID, "–ù–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
		return
	}

	result := "üìä –í–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
	for _, d := range data {
		result += fmt.Sprintf(
			"‚Ä¢ %s %s: üå° %.1f¬∞C, ‚òÄÔ∏è %.1f –í—Ç/–º¬≤, UV %.1f, üíß %.1f%%, üå¨ %.1f –º/—Å\n",
			d.City, d.Date, d.Temperature, d.Sun, d.UV, d.Humidity, d.Wind,
		)
	}

	sendMessage(chatID, result)
}
